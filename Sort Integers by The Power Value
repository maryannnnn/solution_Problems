public class Solution4748 {
    Map<Integer, Integer> resultMap = new HashMap<>();

    public static void main(String[] args) {

        Solution4748 ex = new Solution4748();
        ex.getKth(1, 1000, 777);
    }

    public int getKth(int lo, int hi, int k) {
        TreeMap<Integer, Integer> sorted = new TreeMap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
         if (resultMap.get(o1) > resultMap.get(o2)) {
            return 1;
        } else if (resultMap.get(o1) < resultMap.get(o2)) {
            return -1;
        } if (resultMap.get(o1).equals(resultMap.get(o2))) {
            if (o1 > o2) {
                return 1;
            } else return -1;
        }
        return 0;
            }
        });
        int result = 0;
        int index = 0;
        for (int i = lo; i <= hi; i++) power(i, resultMap);
        sorted.putAll(resultMap);
//        System.out.println(sorted);
        Iterator i = sorted.keySet().iterator();
        while(i.hasNext() && index != k) {
            result = (Integer) i.next();
            index++;
        }
//        System.out.println(result);
        return result;
    }

    public void power(int i, Map<Integer, Integer> resultMap) {
        int tmpI = i;
        int power = 0;
        int countP = 0;
        while (tmpI != 1) {
            if (tmpI%2 == 0) {
                power = tmpI / 2;
            } else {
                power = tmpI * 3 + 1;
            }
            tmpI = power;
            countP++;
        }
        resultMap.put(i, countP);
    }

}
