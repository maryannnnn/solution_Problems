/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
   int start;
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null) return t2;
        if (t2 == null) return t1;
        if (t1 == null && t2 == null) return null;
        TreeNode t3 = new TreeNode(t1.val + t2.val);
        TreeNode resultT3 = t3;
        bynarTree(t1, t2, t3);
        return resultT3;
    }

    public void bynarTree(TreeNode t1, TreeNode t2, TreeNode t3) {
        if (start != 0) {
            if (t1 == null && t2 != null) t3.val = t2.val;
            else if (t2 == null && t1 != null) t3.val = t1.val;
            else if (t1 != null && t2 != null) t3.val = t1.val + t2.val;
     //       System.out.println("t3.val: " + t3.val + " t1.val: " + t1.val + "t2.val: " + t2.val);
        }
        start = 1;
        TreeNode tmp = t3;
        if (t1.left != null && t2.left != null) {
            t3.left = new TreeNode(0);
            bynarTree(t1.left, t2.left, t3.left);
        } else if (t1.left != null && t2.left == null) {
            t3.left = new TreeNode(0);
            bynarOne(t1.left, t3.left);
        } else if (t1.left == null && t2.left != null) {
            t3.left = new TreeNode(0);
            bynarOne(t2.left, t3.left);
        }

        if (t1.right != null && t2.right != null) {
            tmp.right = new TreeNode(0);
            bynarTree(t1.right, t2.right, tmp.right);
        } else if (t1.right != null && t2.right == null) {
            tmp.right = new TreeNode(0);
            bynarOne(t1.right, tmp.right);
        } else if (t1.right == null && t2.right != null) {
            tmp.right = new TreeNode(0);
            bynarOne(t2.right, tmp.right);
        }
    }

    public void bynarOne(TreeNode t, TreeNode t3) {
        
           if (t != null) t3.val = t.val;
      //      System.out.println("t3.val: " + t3.val + " t.val: " + t.val);
       
        TreeNode tmp = t3;
        if (t.left != null) {
            t3.left = new TreeNode(0);
            bynarOne(t.left, t3.left);
        }

        if (t.right != null) {
            tmp.right = new TreeNode(0);
            bynarOne(t.right, tmp.right);
        }
    }
}
