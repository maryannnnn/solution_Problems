/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> listResult = new ArrayList<>();
        if (root == null) return listResult;
        int level = 0;
        return level(root, listResult, level);
    }
    public List<List<Integer>> level(Node root, List<List<Integer>> listResult, int level) {
        List<Integer> listTmp;
        if (listResult.size() - 1 >= level) {
            listTmp = listResult.get(level);
            listTmp.add(root.val);
            listResult.set(level, listTmp);
        } else {
            listTmp = new ArrayList<>();
            listTmp.add(root.val);
            listResult.add(listTmp);
        }
        for (int i = 0; i < root.children.size(); i++) {
                Node elem = root.children.get(i);
                    int levelNew = level + 1;
                    listResult = level(elem, listResult, levelNew);
             }
        return listResult;
    }
}
