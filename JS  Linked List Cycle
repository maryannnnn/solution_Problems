/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function(head) {
  if (head === null || head.next === null) {
    return false; 
  }
  
  const visited = new Set();
  while (head !== null) {
    if (visited.has(head)) {
      return true; 
    }

    visited.add(head);
    head = head.next;
  }
  
  return false; 
};

var hasCycle = function(head) {
    if(head === null) return false

    if(head.next === null) return false
     
    const mapNode = new Map()
    while(head.next !== null) {
        
        if(mapNode.has(head.next.val)) {
            if(mapNode.get(head.next.val) === head.next.next) {
                return true
            }
        }

        mapNode.set(head.val, head.next)
       head = head.next
    }
    return false
};

var hasCycle = function(head) {
  if (head === null || head.next === null) {
    return false; 
  }
  
  const mapNode = new Map();
  while (head !== null) {
    if (mapNode.has(head)) {
      return true; 
    }

    mapNode.set(head, true);
    head = head.next;
  }
  
  return false; 
};


function hasCycle(head) {
  if (!head || !head.next) {
    return false; 
  }
  
  let slow = head; 
  let fast = head.next; 
  
  while (slow !== fast) {
    if (!fast || !fast.next) {
      return false; 
    }
    slow = slow.next; 
    fast = fast.next.next; 
  }
  
  return true;
}
