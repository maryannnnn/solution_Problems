/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class FindElements {

    Map<Integer, Integer> treeMap;
    int direct;
    int x;

    public FindElements(TreeNode root) {
        treeMap = new HashMap();
        Cover(root, -1);
    }

    public void Cover(TreeNode root, Integer prevVal) {

       
        if (treeMap.size() == 0) {
            root.val = 0;
            treeMap.put(0, -1);
            
        } else {
            if (direct == 1) {
                root.val = 2 * prevVal + 1;
                treeMap.put(root.val, prevVal);
            } else if (direct == 2) {
                root.val = 2 * prevVal + 2;
                treeMap.put(root.val, prevVal);
            }

        }

        if (root.left != null && !treeMap.containsKey(root.left.val)) {
            direct = 1;

            Cover(root.left, root.val);
        }
        if (root.right != null && !treeMap.containsKey(root.right.val)) {
            direct = 2;

            Cover(root.right, root.val);
        }

        return;
    }

    public boolean find(int target) {
        if (treeMap.containsKey(target)) return true;
        return false;

    }
}

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements obj = new FindElements(root);
 * boolean param_1 = obj.find(target);
 */
