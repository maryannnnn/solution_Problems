/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
    TreeNode result;
    TreeNode start;
    TreeNode finish;
    public TreeNode increasingBST(TreeNode root) {
        
        if (root == null) return null;
        TreeNode tmpNode = null;
        
        if (result != null) {
            if (root.val > result.val && root.val < finish.val) {
                tmpNode = result; 
                
                while( !(tmpNode.val < root.val && root.val < tmpNode.right.val )) {
                    //prevous = tmpNode;
                    tmpNode = tmpNode.right;
                }
                
                tmpNode.right = new TreeNode(root.val, null, tmpNode.right);
                                   
            } else if (root.val > finish.val) {
                
                finish.right = new TreeNode(root.val);
                finish = finish.right;
                
            } else if (root.val < result.val && root.val > start.val) {
                tmpNode = start;
                
                while( !(tmpNode.val < root.val && root.val < tmpNode.right.val )) {
                    tmpNode = tmpNode.right;
                }
                
                tmpNode.right = new TreeNode(root.val, null, tmpNode.right);
                      
            } else if (root.val < start.val) {
               
                start = new TreeNode(root.val, null, start);
           
            }
            
        } else {  // if result == null
            
                start = finish = result = new TreeNode(root.val);
                
        }

        if (root.left != null) {
           increasingBST(root.left);
        }
        if (root.right != null) {
           increasingBST(root.right);
        }
    return start;
    }
}
